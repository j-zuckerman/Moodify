{"version":3,"sources":["util/hash.js","components/Login.js","context/index.js","util/config.js","styles/Label.js","components/MoodSlider.js","components/GenreSelector.js","components/RecommendedButton.js","components/Tracks.js","components/BackButton.js","components/CreatePlaylistButton.js","components/App.js","index.js"],"names":["hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","redirectUri","MoodifyContext","createContext","MoodifyProvider","children","useState","x","y","state","setState","token","setToken","tracks","setTracks","genresPicked","setGenresPicked","removeGenre","genre","filter","element","a","tempString","i","length","genreListString","slice","console","log","valenceValue","energeticValue","Math","abs","endpoint","toFixed","fetch","headers","Authorization","response","json","data","getUserId","id","userId","method","body","JSON","stringify","name","populatePlaylist","playlistId","populatePlaylistUrl","uris","map","track","uri","playlistUrl","open","Provider","value","fetchAccessToken","access_token","addGenre","includes","groupCollapsed","fetchRecommendedSongs","reset","createPlaylist","scopes","Login","href","join","className","VerticalLabelTop","styled","p","VerticalLabelBottom","HorizontalLabelLeft","HorizontalLabelRight","MoodContainer","div","MoodSlider","useContext","style","display","justifyContent","axis","onChange","GenreSelector","index","key","onClick","RecommendedButton","Tracks","src","album","images","url","artists","BackButton","CreatePlaylistButton","App","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3059a2c0.chunk.js","sourcesContent":["// Get the hash of the url\r\nconst hash = window.location.hash\r\n  .substring(1)\r\n  .split('&')\r\n  .reduce(function (initial, item) {\r\n    if (item) {\r\n      var parts = item.split('=');\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\nwindow.location.hash = '';\r\n\r\nexport default hash;\r\n","import React from 'react';\r\nimport { authEndpoint, clientId, scopes } from '../util/config';\r\n\r\nlet redirectUri;\r\nif (process.env.NODE_ENV === 'development')\r\n  redirectUri = 'http://localhost:3000';\r\nelse if (process.env.NODE_ENV === 'production')\r\n  redirectUri = 'https://j-zuckerman.github.io/Moodify/';\r\n\r\nfunction Login() {\r\n  return (\r\n    <a\r\n      href={`${authEndpoint}client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\r\n        '%20'\r\n      )}&response_type=token&show_dialog=true`}\r\n      className=\"mt-10 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n    >\r\n      Login with Spotify\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { createContext, useState, useEffect } from 'react';\r\nimport hash from '../util/hash';\r\n\r\nexport const MoodifyContext = createContext();\r\n\r\nconst MoodifyProvider = ({ children }) => {\r\n  const [state, setState] = useState({ x: 10, y: 10 });\r\n  const [token, setToken] = useState(null);\r\n  const [tracks, setTracks] = useState(null);\r\n  const [genresPicked, setGenresPicked] = useState([]);\r\n  const [userId, setUserId] = useState(null);\r\n\r\n  function fetchAccessToken() {\r\n    console.log(hash.access_token);\r\n    setToken(hash.access_token);\r\n\r\n    getUserId();\r\n  }\r\n\r\n  function addGenre(genre) {\r\n    if (genresPicked.length > 5) return;\r\n    if (genresPicked.includes(genre)) removeGenre(genre);\r\n    else setGenresPicked([...genresPicked, genre]);\r\n    console.groupCollapsed(genresPicked);\r\n  }\r\n\r\n  function removeGenre(genre) {\r\n    setGenresPicked(genresPicked.filter((element) => element !== genre));\r\n  }\r\n\r\n  async function fetchRecommendedSongs() {\r\n    // Create comma separated list of genres for API call\r\n    let tempString = '';\r\n    for (let i = 0; i < genresPicked.length; i++) {\r\n      tempString += genresPicked[i] + ',';\r\n    }\r\n\r\n    //remove last comma\r\n    let genreListString = tempString.slice(0, tempString.length - 1);\r\n    console.log(genreListString);\r\n\r\n    //normalize mood to decimal values\r\n    let valenceValue = state.x / 100;\r\n    let energeticValue = Math.abs(state.y - 100) / 100;\r\n\r\n    let endpoint = `https://api.spotify.com/v1/recommendations?seed_genres=${genreListString}&min_popularity=65&target_valence=${valenceValue.toFixed(\r\n      1\r\n    )}&target_energy=${energeticValue.toFixed(1)}`;\r\n\r\n    const response = await fetch(endpoint, {\r\n      headers: {\r\n        Authorization: 'Bearer ' + token,\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(data);\r\n    setTracks(data.tracks);\r\n  }\r\n\r\n  function reset() {\r\n    setTracks(null);\r\n    setGenresPicked([]);\r\n  }\r\n\r\n  async function getUserId() {\r\n    const response = await fetch('https://api.spotify.com/v1/me', {\r\n      headers: {\r\n        Authorization: 'Bearer ' + token,\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data.id;\r\n  }\r\n\r\n  async function createPlaylist() {\r\n    const userId = await getUserId();\r\n    const response = await fetch(\r\n      `https://api.spotify.com/v1/users/${userId}/playlists`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: 'Bearer ' + token,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ name: 'Moodify Recommendations' }),\r\n      }\r\n    );\r\n    let data = await response.json();\r\n\r\n    populatePlaylist(data.id);\r\n  }\r\n\r\n  async function populatePlaylist(playlistId) {\r\n    const populatePlaylistUrl = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;\r\n\r\n    await fetch(populatePlaylistUrl, {\r\n      method: 'PUT',\r\n      headers: {\r\n        Authorization: 'Bearer ' + token,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        uris: tracks.map((track) => track.uri),\r\n      }),\r\n    });\r\n\r\n    const playlistUrl = `https://open.spotify.com/playlist/${playlistId}`;\r\n    window.open(playlistUrl);\r\n  }\r\n\r\n  return (\r\n    <MoodifyContext.Provider\r\n      value={{\r\n        token,\r\n        fetchAccessToken,\r\n        addGenre,\r\n        removeGenre,\r\n        genresPicked,\r\n        state,\r\n        setState,\r\n        fetchRecommendedSongs,\r\n        tracks,\r\n        reset,\r\n        createPlaylist,\r\n      }}\r\n    >\r\n      {children}\r\n    </MoodifyContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MoodifyProvider;\r\n","export const authEndpoint = 'https://accounts.spotify.com/authorize?';\r\n\r\nexport const clientId = '29014fd46c7b4f54a73386b862156072';\r\n\r\nexport const scopes = ['user-read-email', 'playlist-modify-public'];\r\n","import styled from 'styled-components';\r\n\r\nexport const VerticalLabelTop = styled.p`\r\n  position: absolute;\r\n  top: -40px;\r\n  right: 40%;\r\n`;\r\nexport const VerticalLabelBottom = styled.p`\r\n  position: absolute;\r\n  bottom: -40px;\r\n  right: 40%;\r\n`;\r\nexport const HorizontalLabelLeft = styled.p`\r\n  position: absolute;\r\n  top: 40%;\r\n  left: -35px;\r\n`;\r\nexport const HorizontalLabelRight = styled.p`\r\n  position: absolute;\r\n  top: 40%;\r\n  right: -50px;\r\n`;\r\n","import React, { useContext } from 'react';\r\nimport { MoodifyContext } from '../context';\r\nimport Slider from 'react-input-slider';\r\nimport styled from 'styled-components';\r\nimport {\r\n  VerticalLabelBottom,\r\n  VerticalLabelTop,\r\n  HorizontalLabelLeft,\r\n  HorizontalLabelRight,\r\n} from '../styles/Label';\r\n\r\nconst MoodContainer = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n`;\r\n\r\nfunction MoodSlider() {\r\n  const { state, setState } = useContext(MoodifyContext);\r\n\r\n  return (\r\n    <div\r\n      style={{ display: 'flex', justifyContent: 'center' }}\r\n      className=\"mb-20\"\r\n    >\r\n      <MoodContainer>\r\n        <VerticalLabelTop>Energetic</VerticalLabelTop>\r\n        <VerticalLabelBottom>Peaceful</VerticalLabelBottom>\r\n        <HorizontalLabelLeft>Sad</HorizontalLabelLeft>\r\n        <HorizontalLabelRight>Happy</HorizontalLabelRight>\r\n        <Slider axis=\"xy\" x={state.x} y={state.y} onChange={setState} />\r\n      </MoodContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoodSlider;\r\n","import React, { useState, useContext } from 'react';\r\nimport { MoodifyContext } from '../context';\r\n\r\nfunction GenreSelector() {\r\n  const { addGenre } = useContext(MoodifyContext);\r\n  const listOfGenres = [\r\n    'alternative',\r\n    'anime',\r\n    'chill',\r\n    'classical',\r\n    'country',\r\n    'dance',\r\n    'disco',\r\n    'dubstep',\r\n    'edm',\r\n    'emo',\r\n    'indie',\r\n    'metal',\r\n    'party',\r\n    'punk',\r\n    'rock',\r\n    'r-n-b',\r\n    'study',\r\n    'techno',\r\n    'trance',\r\n  ];\r\n  return (\r\n    <div className=\"flex flex-wrap content-center\">\r\n      {listOfGenres.map((genre, index) => (\r\n        <span\r\n          className=\"mr-5 mb-3 bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\r\n          key={index}\r\n          onClick={() => addGenre(genre)}\r\n        >\r\n          {genre}\r\n        </span>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GenreSelector;\r\n","import React, { useContext } from 'react';\r\nimport { MoodifyContext } from '../context';\r\n\r\nfunction RecommendedButton() {\r\n  const { fetchRecommendedSongs } = useContext(MoodifyContext);\r\n  return (\r\n    <button\r\n      className=\"mt-10 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n      onClick={fetchRecommendedSongs}\r\n    >\r\n      Get Songs\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default RecommendedButton;\r\n","import React, { useContext } from 'react';\r\nimport { MoodifyContext } from '../context';\r\n\r\n//{track.external_urls.spotify}\r\nfunction Tracks() {\r\n  const { tracks } = useContext(MoodifyContext);\r\n\r\n  return (\r\n    <div className=\"flex justify-center w-11/12 max-w-5xl m-4 \">\r\n      <div className=\"grid gap-1 grid-cols-4 justify-center\">\r\n        {tracks.map((track) => (\r\n          <div className=\"flex mr-5 mb-3 align-center w-64 h-24 p-2\">\r\n            <img\r\n              className=\"h-16 w-16 rounded-sm\"\r\n              src={track.album.images[2].url}\r\n            />\r\n            <div className=\"p-2\">\r\n              <p>{track.artists[0].name}</p>\r\n              <p>{track.name}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracks;\r\n","import React, { useContext } from 'react';\r\nimport { MoodifyContext } from '../context';\r\n\r\nfunction BackButton() {\r\n  const { reset } = useContext(MoodifyContext);\r\n\r\n  return (\r\n    <button\r\n      className=\"mt-10 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n      onClick={reset}\r\n    >\r\n      Go Back\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default BackButton;\r\n","import React, { useContext } from 'react';\r\nimport { MoodifyContext } from '../context';\r\n\r\nfunction CreatePlaylistButton() {\r\n  const { createPlaylist } = useContext(MoodifyContext);\r\n\r\n  return (\r\n    <button\r\n      className=\"mt-10 mr-5 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n      onClick={createPlaylist}\r\n    >\r\n      Create Playlist\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default CreatePlaylistButton;\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { MoodifyContext } from '../context';\r\nimport Login from './Login';\r\nimport MoodSlider from './MoodSlider';\r\nimport GenreSelector from './GenreSelector';\r\nimport RecommendedButton from './RecommendedButton';\r\nimport Tracks from './Tracks';\r\nimport BackButton from './BackButton';\r\nimport CreatePlaylistButton from './CreatePlaylistButton';\r\n\r\nfunction App() {\r\n  const { fetchAccessToken, token, tracks } = useContext(MoodifyContext);\r\n\r\n  useEffect(() => {\r\n    fetchAccessToken();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {!token && (\r\n        <div className=\"container mt-20 mx-auto flex flex-col items-center content-center\">\r\n          <h1 className=\"text-5xl\">Moodify</h1>\r\n          <h3 className=\"text-3xl\">\r\n            Get a recommended playlist of songs based on your mood.\r\n          </h3>\r\n          <h3 className=\"text-3xl\">\r\n            Connect to your Spotify Account to begin.\r\n          </h3>\r\n\r\n          <Login></Login>\r\n        </div>\r\n      )}\r\n\r\n      {token && !tracks && (\r\n        <div className=\"container mt-10 mx-auto flex flex-col items-center content-center\">\r\n          <h3 className=\"text-3xl mb-20\">What type of mood are you in?</h3>\r\n          <MoodSlider></MoodSlider>\r\n          <h3 className=\"text-3xl mb-10\">Pick up to 5 genres.</h3>\r\n          <GenreSelector></GenreSelector>\r\n          <RecommendedButton></RecommendedButton>\r\n        </div>\r\n      )}\r\n\r\n      {tracks && (\r\n        <div className=\"flex justify-center items-center flex-col\">\r\n          <h3 className=\"text-3xl mt-20 mb-12\">\r\n            Here are your recommended songs:\r\n          </h3>\r\n          <Tracks></Tracks>\r\n          <div className=\"mb-10\">\r\n            <CreatePlaylistButton></CreatePlaylistButton>\r\n            <BackButton></BackButton>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport MoodifyProvider from './context';\r\nimport './tailwind.output.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MoodifyProvider>\r\n      <App />\r\n    </MoodifyProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}